import numpy as np
import scipy
import matplotlib.pylab as plot
import math
import scipy.integrate

#Parameter
#Operating parameter and inlet conditions
Ya0      = 3000/1E6             #Initial CO mol fraction                                         #ppm             
Yae      = 3000/1E6             #Entering CO mol fraction                                        #ppm
Yb0      = 0.0                  #Initial CO2 mol fraction                                        #ppm
Ybe      = 0.0                  #Entering CO2 mol fraction                                       #ppm
Yc0      = 500/1E6              #Initial C3H8 mol fraction                                       #ppm
Yce      = 500/1E6              #Entering C3H8 mol fraction                                      #ppm
Tk0      = 417                  #Initial temperature                                             #K
Tke      = 417                  #Entering temperature                                            #K
R        = 8.314                #Gas constant                                                    #m^3.Pa/(K.mol)
P        = 101325               #Pressure                                                        #Pa
vmean    = 2.4                  #Linear mean fluid velocity                                      #m/s
Mflow    = 0.64                 #Average moar flowrate of fuel and air                           #mol/s

#Information of dimension and active sites
r0       = 5.45E-4              #Channel radius                                                  #m
s0       = 20E-6                #Washcat thickness                                               #m
u0       = 90E-6                #Cordierite thickness                                            #m
dm       = 0.106                #Diameter of monolith block                                      #m
w_slice  = 27.6316              #Weight of a monolith slice based on 630g per monolith           #g
cpsi     = 400                  #Cells per square inch                      

#Details of porous media (Assume parallel pore)
re       = 13.3E-9              #Equivalent pore radius                                          #m
por      = 0.5                  #Porosity                                                        #m^3 gas/m^3
tau      = 4                    #Tortuosity                           

#Active sites per catalyst/washcoat
LPt      = 2.0E-6               #Pt loading data from CO chemisorption on wc and cord            #mol(Pt)/g(cat)
aBET     = 100                  #BET surface from ASAP and autopore)                             #m2 (cat)/g(cat)
rho_wc   = 1.3E6                #Loose buk density                                               #g/m3
rho_cord = 2.5E6                #Density of substrate                                            #g/m3
LPtc     = 0.005468             #Data from weighing                                              #g(Pt)/g(cat)

#Common information of catalyst
zl      = 0.005                 #Channel length of 5mm thin slice                                #m
Avo     = 6.022E23              #Avogadro number                                                 #mol^-1
MPt     = 195.08                #Molar mass of Pt                                                #g(Pt)/mol(Pt)
a_m     = 8.07E-20              #Surface area occupied by a Pt atom on a polycrystalline surface #m2
cpsm    = cpsi/0.000645         #Cells / m^2
Amon    = math.pi*(dm/2)**2     #Cross sectional area of monolith slice                          #m2
ncell   = cpsm*Amon             #Number of cells
V_slice = Amon*zl               #Volume of a slice includeing voidage                            #m^3    
H       = LPt/aBET              #Assume uniform active sites density                             #mol(Pt) m^-2(cat)
Av      = aBET*rho_wc           #Internal Surface area per reactor vol                           #m2(cat) m^-3(cat)
r_gtc   = por/(1-por)           #Ratio of voue of gas to solid                                   #m^3(gas) m ^-3(cat)
N_atom  = LPtc*Avo/MPt          #No. of Pt atoms as deposited                                    
Ns_atom = LPt*Avo               #No. of Pt surface atoms
D       = Ns_atom/N_atom        #Pt dispersion  
Ssp     = a_m*Avo*D/MPt         #Specific surface area
G       = 1 /(Ssp*MPt)                                                                           #mol(Pt) m-2(Pt)

#Parameter for bulk diffusion coefficient
Mco     = 28.01                 #Molar mass of CO                                                #kg/kmol
Mair    = 28.96                 #Molar mass of air                                               #kg/kmol
Mo2     = 32.0                  #Molar mass of oxygen                                            #kg/kmol
Mco2    = 44.01                 #Molar mass of carbon dioxide                                    #kg/kmol
Mc3h8   = 44.1                  #Molar mass of propane                                           #kg/kmol
Vco     = 18.9                  #Molecular volume of CO                                          #m3/kmol
Vair    = 20.1                  #Molecular volume of air                                         #m3/kmol
Vco2    = 22.262                #Molecular volume of CO2                                         #m3/kmol
Vc3h8   = 65.34                 #Molecular volume of C3H8                                        #m3/kmol

#Setting up grides
#Grid in axial direction (gas and solid phase)
nz      = 3                     #Number of grid
dz      = zl/nz                 #Difference from point z to z+dz
z       = np.linspace(dz,zl,nz) 
dzs     = dz**2                 #Square of difference from point z to z+dz

#Grid in radial direction (solid phase)
ns      = 3                     #Number of grid
ds      = s0/(ns-1)             #Difference from point s to s+ds
s       = np.linspace(0,s0,ns)
dss     = ds**2                 #Square of difference from point s to s+ds

#Grid in radial direction (solid coerdierite phase) 
nu      = 3                     #Number of grid
du      = u0/nu                 #Difference from point u to u+du
u       = np.linspace(du,u0,nu)
dus     = du**2                 #Square of difference from point u to u+du

#Kinetic Parameters for LHHW (Salomons et al)
pf      = 0.729e21              #Pre-exponential factor       
pg      = 965.5                 #Pre-exponential factor 
pt      = 4.042e15              #Pre-exponential factor 
pv      = 2080.0                #Pre-exponential factor 
pw      = 3.98                  #Pre-exponential factor 
act1    = -12556.0              #Activation energy
act2    = 961.0                 #Activation energy
act3    = -1.08e4               #Activation energy
act4    = 361.0                 #Activation energy
act5    = 11611.0               #Activation energy

#Other paramter
YO2     = 0.0933                #Oxygen mole fraction      
DH      = 1.09E-3               #Hydraulic diameter                                                #m
ff      = 1.0

#Time (ODE integration)
tf      = 300                   #Final integration time 
td      = 1                     #Difference of t and t+dt
t0      = 0                     #Initial integration time
tout    = np.arange(t0,tf+td,td)
nout    = tf                    #Final integration time
n_steps = np.floor((tf-t0)/td)+1#Number of discretization

#Set array to zeros                                           
#Bulk diffusion coefficient and dispersion coefficient 
v = np.zeros(nz)
Dca = np.zeros(nz)
Dcb = np.zeros(nz)
Dcc = np.zeros(nz)
Dia = np.zeros(nz)
Dib = np.zeros(nz)
Dic = np.zeros(nz)

#Thermal diffusion coefficient in the fluid (Air) 
k_a = np.zeros(nz)
rho_a = np.zeros(nz)
Cp_a = np.zeros(nz)
Dt = np.zeros(nz)
Dit = np.zeros(nz)
miu = np.zeros(nz)

#Gas phase(Dimensionless number) and transfer coefficients and assume mass-heat transfer analogy
Rey = np.zeros(nz)
L = np.zeros(nz)
Gz = np.zeros(nz)
NuT = np.zeros(nz)
NuH = np.zeros(nz)
Nu = np.zeros(nz)
Sh = np.zeros(nz)
hm = np.zeros(nz)
kma = np.zeros(nz)
kmb = np.zeros(nz)
kmc = np.zeros(nz)

#Parameter for effective diffusivity of washcoat
Dcas = np.zeros((nz,ns))
Dcbs = np.zeros((nz,ns))
Dccs = np.zeros((nz,ns))

Dkas = np.zeros((nz,ns))
Dkbs = np.zeros((nz,ns))
Dkcs = np.zeros((nz,ns))

Dvas = np.zeros((nz,ns))
Dvbs = np.zeros((nz,ns))
Dvcs = np.zeros((nz,ns))

Deas = np.zeros((nz,ns))
Debs = np.zeros((nz,ns))
Decs = np.zeros((nz,ns))

#Parameter for thermal effective diffusivity in the washcoat
k_s = np.zeros((nz,ns))
rho_s = np.zeros((nz,ns))
Cp_s = np.zeros((nz,ns))
Ds = np.zeros((nz,ns))

#Mol fraction in the solid phase
YCO = np.zeros((nz,ns))
YCO2 = np.zeros((nz,ns))
YHC = np.zeros((nz,ns))

#Rate constant
k1 = np.zeros((nz,ns))
k2 = np.zeros((nz,ns))
k3 = np.zeros((nz,ns))
k4 = np.zeros((nz,ns))
k5 = np.zeros((nz,ns))
Inh = np.zeros((nz,ns))
RCO = np.zeros((nz,ns))
RHC = np.zeros((nz,ns))
RCO2 = np.zeros((nz,ns))
RTCO = np.zeros((nz,ns))
RTHC = np.zeros((nz,ns))
dHR = np.zeros((nz,ns))
dHRP = np.zeros((nz,ns))

#Thermal effective diffusivity in the washcoat
k_u = np.zeros((nz,nu))
rho_u = np.zeros((nz,nu))
Cp_u = np.zeros((nz,nu))
Du = np.zeros((nz,nu))

#Derivative groups in radial direction (solid coerdierite phase) 
Tkuu = np.zeros((nz,nu))
Tkuuu = np.zeros((nz,nu))
Tkuzz = np.zeros((nz,nu))                                                        #Radial direction (solid coerdierite phase) 

#Second derivative groups in axial direction (gas and solid phase)
Yazz = np.zeros(nz)
Ybzz = np.zeros(nz)
Yczz = np.zeros(nz)
Tkzz = np.zeros(nz)

#First derivative groups in axial direction (gas and solid phase)
Yaz = np.zeros(nz)
Ybz = np.zeros(nz)
Ycz = np.zeros(nz)
Tkz = np.zeros(nz)

#First derivative groups in radial direction (solid phase)
Yass = np.zeros((nz,ns))
Ybss = np.zeros((nz,ns))
Ycss = np.zeros((nz,ns))
Tkss = np.zeros((nz,ns))

#Second derivative groups in radial direction (solid phase)
Yasss = np.zeros((nz,ns))
Ybsss = np.zeros((nz,ns))
Ycsss = np.zeros((nz,ns))
Tksss = np.zeros((nz,ns))

#Second derivative groups in radial direction (solid phase)
Yaszz = np.zeros((nz,ns))
Ybszz = np.zeros((nz,ns))
Ycszz = np.zeros((nz,ns))
Tkszz = np.zeros((nz,ns))

Tkuu = np.zeros((nz,nu))
Tkuuu = np.zeros((nz,nu))
Tkuzz = np.zeros((nz,nu))

#Partial Differential Equation
#Axial direction (gas and solid phase)
Yat = np.zeros(nz)
Ybt = np.zeros(nz)
Yct = np.zeros(nz)
Tkt = np.zeros(nz)

#Radial direction (solid phase)
Yast = np.zeros((nz,ns))
Ybst = np.zeros((nz,ns))
Ycst = np.zeros((nz,ns))
Tkst = np.zeros((nz,ns))

#Radial direction (solid coerdierite phase) 
Tkut = np.zeros((nz,nu))
    
#Convert 2D into 1D
#Axial direction (gas and solid phase)
Ya      = Ya0*np.ones(nz)
Yb      = Yb0*np.ones(nz)
Yc      = Yc0*np.ones(nz)
Tk      = Tk0*np.ones(nz)

Y1      = np.insert(Ya, nz, Yb)
Y2      = np.insert(Y1,len(Y1),Yc)
Y3      = np.insert(Y2,len(Y2),Tk)
        
#Radial direction (solid phase)
Yas     = Ya0*np.ones((nz,ns))
Ybs     = Yb0*np.ones((nz,ns))
Ycs     = Yc0*np.ones((nz,ns))
Tks     = Tk0*np.ones((nz,ns))
Yas1     = Yas.ravel()
Ybs1     = Ybs.ravel()
Ycs1     = Ycs.ravel()
Tks1     = Tks.ravel()

Y4      = np.insert(Y3,len(Y3),Yas1)
Y5      = np.insert(Y4,len(Y4),Ybs1)
Y6      = np.insert(Y5,len(Y5),Ycs1)
Y7      = np.insert(Y6,len(Y6),Tks1)

#Radial direction (solid coerdierite phase)
Tku  =Tk0*np.ones((nz,nu))
Tku1 = Tku.ravel()
Y = np.insert(Y7,len(Y7),Tku1)

#Equation
for i in range(0,nz):

    #Bulk diffusion coefficient and dispersion coefficient
    v[i]     = vmean*Tk[i]/298                                                                          #Velocity                                                   #m/s
    Dca[i]   = (1.013E-2*Tk[i]**(1.75)*(1/Mco+1/Mair)**(0.5))/(P*(Vco**(0.3333)+Vair**(0.3333))**2)     #Fuller equation (Molecular diffusion coefficient of CO)    #m2/s
    Dcb[i]   = (1.013E-2*Tk[i]**1.75*(1/Mco2+1/Mair)**0.5)/(P*(Vco2**(0.3333)+Vair**(0.3333))**2)       #Fuller equation (Molecular diffusion coefficient of CO2)   #m2/s
    Dcc[i]   = (1.013E-2*Tk[i]**1.75*(1/Mc3h8+1/Mair)**0.5)/(P*(Vc3h8**(0.3333)+Vair**(0.3333))**2)     #Fuller equation (Molecular diffusion coefficient of HC)    #m2/s
    Dia[i]   = Dca[i] + (v[i]*r0)**2.0/(48.0*Dca[i])                                                    #Taylor and Aris (Dispersion coefficient of CO)             #m2/s
    Dib[i]   = Dcb[i] + (v[i]*r0)**2/(48*Dcb[i])                                                        #Taylor and Aris (Dispersion coefficient of CO2)            #m2/s
    Dic[i]   = Dcc[i] + (v[i]*r0)**2/(48*Dcc[i])                                                        #Taylor and Aris (Dispersion coefficient of HC)             #m2/s

    #Thermal diffusion coefficient in the fluid (Air)
    k_a[i]   = 1.679E-2+5.073E-5*Tk[i]                                                                  #Thermal conductivity                                       #W/mK
    rho_a[i] = P*Mair/(1000*R*Tk[i])                                                                    #Fluid density of air                                       #kg/m3
    Cp_a[i]  = (28.09+1.965E-3*Tk[i]+4.799E-6*Tk[i]**2-1.965E-9*Tk[i]**3)/(Mair/1000)                   #Specific heat of air                                       #J/kgK
    Dt[i]    = k_a[i]/(rho_a[i]*Cp_a[i])                                                                #Thermal diffusivity                                        #m2/s
    Dit[i]   = Dt[i]+(v[i]*r0)**2/(48*Dt[i])                                                            #Taylor and Aris (Dispersion coefficient of air)            #m2/s

    #Gas phase dimensionless number
    miu[i]   = 7.701E-6+4.166E-8*Tk[i]-7.531E-12*Tk[i]**2                                               #Dynamic viscosity                                          #Pa.s
    Rey[i]   = rho_a[i]*vmean*DH/miu[i]                                                                 #Reynolds number
    Pr      = 0.7                                                                                       #Prandtl number
    L[i]    = (i+1)*dz                                                                                  #Distance from entrance in direction of gas flow                                                                  
    Gz[i]   = Rey[i]*Pr*DH/L[i]                                                                         #Graetz Number
    NuT[i]  = 3.657+8.827*(1000/Gz[i])**-0.545*math.exp(-48.2/Gz[i])                                    #Correlation of Nu for wall temperature (Tronconi and Forzatti)                                     
    NuH[i]  = 4.367+13.18*(1000/Gz[i])**-0.524*math.exp(-60.2/Gz[i])                                    #Correlation of Nu for wall flux        (Hayes)
    Nu[i]   = (NuT[i]+NuH[i])/2+2 
    dHR     = -282.55E3                                                                                 #Heat of reaction of CO                                            #kJ/mol.K
    
    #Transfer coefficients and assume mass-heat transfer analogy
    Sh[i]   = Nu[i]                                                                                     #Sherwood number
    kma[i]  = Sh[i]*Dca[i]/DH                                                                           #Mass transfer coefficient for CO                           #m/s
    kmb[i]  = Sh[i]*Dcb[i]/DH                                                                           #Mass transfer coefficient for CO2                          #m/s
    kmc[i]  = Sh[i]*Dcc[i]/DH                                                                           #Mass transfer coefficient for HC                           #m/s
    hm[i]   = Nu[i]*k_a[i]/DH                                                                           #Heat transfer coefficient for CO                           #W/(m2.K)                          #m/s
           
for jj in range (0,ns):
    for i in range(0,nz):

        #Mole fraction in solid phase
        YCO[i,jj]   = Yas [i,jj]                                                                                        #Carbon monoxide
        YCO2[i,jj]  = Ybs[i,jj]                                                                                         #Carbon dioxide
        YHC[i,jj]   = Ycs[i,jj]                                                                                         #Hydrocarbon

        #Effecitive diffusivity
        Dcas[i,jj] = (1.013E-2*Tks[i,jj]**1.75*(1/Mco+1/Mair)**(0.5))/(P*(Vco**(0.3333)+Vair**(0.3333))**2)             #Fuller equation (Molecular diffusion coefficient of CO)     #m2/s
        Dcbs[i,jj] = (1.013E-2*Tks[i,jj]**1.75*(1/Mco2+1/Mair)**0.5)/(P*(Vco2**(0.3333)+Vair**(0.3333))**2)             #Fuller equation (Molecular diffusion coefficient of CO2)    #m2/s
        Dccs[i,jj] = (1.013E-2*Tks[i,jj]**1.75*(1/Mc3h8+1/Mair)**0.5)/(P*(Vc3h8**(0.3333)+Vair**(0.3333))**2)           #Fuller equation (Molecular diffusion coefficient of HC)     #m2/s
        Dkas[i,jj] = 97.0*re*(Tks[i,jj]/Mco)**0.5                                                                       #Knudsen diffusion coefficiet of CO                          #m2/s
        Dkbs[i,jj] = 97.0*re*(Tks[i,jj]/Mco2)**0.5                                                                      #Knudsen diffusion coefficient of CO2                        #m2/s
        Dkcs[i,jj] = 97.0*re*(Tks[i,jj]/Mc3h8)**0.5                                                                     #Knudsen diffusion coefficientof HC                          #m2/s
        Dvas[i,jj] = 1/(1/Dcas[i,jj]+1/Dkas[i,jj])                                                                      #Diffusion coefficient in the pore for CO                    #m2/s                                                                 #Knudsen diffusion coefficient of CO
        Dvbs[i,jj] = 1/(1/Dcbs[i,jj]+1/Dkbs[i,jj])                                                                      #Diffusion coefficient in the pore for CO2                   #m2/s
        Dvcs[i,jj] = 1/(1/Dccs[i,jj]+1/Dkcs[i,jj])                                                                      #Diffusion coefficient in the pore for HC                    #m2/s
        Deas[i,jj] = ff*por*Dvas[i,jj]/tau                                                                              #Effective Diffusivity of CO                                 #m2/s 
        Debs[i,jj] = ff*por*Dvbs[i,jj]/tau                                                                              #Effective Diffusivity of CO2                                #m2/s
        Decs[i,jj] = ff*por*Dvcs[i,jj]/tau                                                                              #Effective Diffusivity of HC                                 #m2/s

        #Thermal effective diffusivity in washcoat
        k_s[i,jj]   = 0.9558-2.09E-4*Tks[i,jj]                                                                          #Soid thermal conductivity                                   #W/mK                                          
        rho_s[i,jj] = rho_wc/1000                                                                                       #Washcoat density                                            #kg/m3
        Cp_s[i,jj]  = 948 + 0.2268*Tks[i,jj]                                                                            #Specific heat capacity of solid                             #J/kgK
        Ds[i,jj]    = k_s[i,jj]/(rho_s[i,jj]*Cp_s[i,jj])                                                                #Thermal diffusivity                                         #m2/s

        #Rate constant
        k1[i,jj]    = pf*math.exp(act1/Tks[i,jj])                                                                       #Numerator for CO
        k2[i,jj]    = pg*math.exp(act2/Tks[i,jj])                                                                       #Denominator (Inhibition term)
        k3[i,jj]    = pt*math.exp(act3/Tks[i,jj])                                                                       #Numerator for HC
        k4[i,jj]    = pv*math.exp(act4/Tks[i,jj])                                                                       #Denominator (Inhibition term)
        k5[i,jj]    = pw*math.exp(act5/Tks[i,jj])                                                                       #Denominator,extra
        Inh[i,jj]   = Tks[i,jj]*(1+k2[i,jj]*YCO[i,jj]+k4[i,jj]*YHC[i,jj])**2*(1+k5[i,jj]*(YCO[i,jj])**2*(YHC[i,jj])**2) #Inhibition term      
        RCO[i,jj]   = k1[i,jj]*YCO[i,jj]*YO2/Inh[i,jj]*R*Tks[i,jj]/P                                                    #Unit conversion                                             #m3(CO)/mol(Pt)s
        RHC[i,jj]   = k3[i,jj]*YHC[i,jj]*YO2/Inh[i,jj]*R*Tks[i,jj]/P                                                    #Unit conversion                                             #m3(HC)/mol(Pt)s
        RCO2[i,jj]  = RCO[i,jj]+RHC[i,jj]                                                                               #Unit conversion                                             #m3(CO2)/mol(Pt)s
        RTCO[i,jj]  = k1[i,jj]*YCO[i,jj]*YO2/Inh[i,jj]                                                                  #Unit conversion                                             #mol(CO)/mol(Pt) s
        RTHC[i,jj]  = k3[i,jj]*YHC[i,jj]*YO2/Inh[i,jj]                                                                  #Unit conversion                                             #mol(HC)/mol(Pt) s
        dHRP[i,jj]  = -2.059E6+72.3*Tks[i,jj]-9.69E-2*Tks[i,jj]**2+4.34E-5*Tks[i,jj]**3+7.56e-9*Tks[i,jj]**4            #Heat of reaction for HC                                     #kJ/mol.K

for jjj in range(0,nu):
    for i in range(0,nz):

        #Thermal effective diffusivity in the washcoat
            k_u[i,jjj]   = 5.423e-9*Tku[i,jjj]**3-1.276e-5*Tku[i,jjj]**2+8.107e-3*Tku[i,jjj]+7.975e-1                   #Solid thermal conductivity                                  #W/m.K               
            rho_u[i,jjj] = rho_cord/1000                                                                                #Density of substrate                                        #kg/m3
            Cp_u[i,jjj]  = 1071 + 0.156*Tku[i,jjj]-3.437E7*Tku[i,jjj]**-2                                               #Specific heat capacity of washcoat                          #J/kg.K
            Du[i,jjj]    = k_u[i,jjj]/(rho_u[i,jjj]*Cp_u[i,jjj])                                                        #Thermal diffusivity                                         #m2/s
            
#Function for integration
def pde(t,y,Dia,kma,Dib,kmb,Dic,kmc,Dit,hm,Cp_a,rho_a,Deas,RCO,Debs,RCO2,Decs,RHC,Ds,dHRP,rho_s,Cp_s,k_u,rho_u,Cp_u,Du):

#Obtain parameter from 2D and convert to 1D

    #Gas phase
    for i in range (0,nz):
        Ya[i] = y[i]
        Yb[i] = y[i+nz]
        Yc[i] = y[i+2*nz]
        Tk[i] = y[i+3*nz]

    #Solid washcoat phase
    for jj in range(0,ns):
        for i in range(0,nz):
            Yas[i,jj] = y[4*nz+i*ns+jj]
            Ybs[i,jj] = y[4*nz+i*ns+jj+ns*nz]
            Ycs[i,jj] = y[4*nz+i*ns+jj+2*ns*nz]
            Tks[i,jj] = y[4*nz+i*ns+jj+3*ns*nz]

    #Solid cordierite phase
    for jjj in range(0,nu):
        for i in range(0,nz):
            Tku[i,jjj] = y[4*nz+4*nz*ns+i*nu+jjj] 


    rt1=150.0                # Linear ramp time     #s
    rt2=150.0                # Linear ramp time     #s
    Tkem=543.0               # Max Temperature      #K
    mp1=(Tkem-Tke)/rt1      # Gradient 1
    mp2=(Tke-Tkem)/rt2      # Gradient 2
    
    if f.t<rt1+1:             
        Tkee=Tke+mp1*f.t
        
    elif f.t>rt1:             
        Tkee=Tkem-mp2*(rt1-f.t)        
        
    else:
        Tkee=Tke    

    #First derivative and second derivative for diffusion term and advection term in axial direction    
    #Gas phase
    for i in range(0,nz):
        if (i ==0):

            Yaz[i]  = (Ya[i]-Yae)/dz
            Ybz[i]  = (Yb[i]-Ybe)/dz
            Ycz[i]  = (Yc[i]-Yce)/dz
            Tkz[i]  = (Tk[i]-Tkee)/dz
            
            Yazz[i] = (Ya[i+1]-2.0*Ya[i]+Yae)/dzs
            Ybzz[i] = (Yb[i+1]-2.0*Yb[i]+Ybe)/dzs
            Yczz[i] = (Yc[i+1]-2.0*Yc[i]+Yce)/dzs
            Tkzz[i] = (Tk[i+1]-2.0*Tk[i]+Tkee)/dzs
       
        elif (i<nz-1):
            Yaz[i]  = (Ya[i]-Ya[i-1])/dz
            Ybz[i]  = (Yb[i]-Yb[i-1])/dz
            Ycz[i]  = (Yc[i]-Yc[i-1])/dz
            Tkz[i]  = (Tk[i]-Tk[i-1])/dz
            
            Yazz[i] = (Ya[i+1]-2.0*Ya[i]+Ya[i-1])/dzs
            Ybzz[i] = (Yb[i+1]-2.0*Yb[i]+Yb[i-1])/dzs
            Yczz[i] = (Yc[i+1]-2.0*Yc[i]+Yc[i-1])/dzs
            Tkzz[i] = (Tk[i+1]-2.0*Tk[i]+Tk[i-1])/dzs



        else :
            Yaz[i]  = (Ya[i]-Ya[i-1])/dz
            Ybz[i]  = (Yb[i]-Yb[i-1])/dz
            Ycz[i]  = (Yc[i]-Yc[i-1])/dz
            Tkz[i]  = (Tk[i]-Tk[i-1])/dz
            
            Yazz[i] = 2*(Ya[i-1]-Ya[i])/dzs
            Ybzz[i] = 2*(Yb[i-1]-Yb[i])/dzs
            Yczz[i] = 2*(Yc[i-1]-Yc[i])/dzs
            Tkzz[i] = 2*(Tk[i-1]-Tk[i])/dzs
            
    #First derivative and second derivative for diffusion term and advection term in axial direction and radial direction
    #Solid washcoat phase
    for jj in range (0,ns):
        for i in range(0,nz):           
            if (jj == 0):   
                Yass[i,jj]= 1/por*(4.0*Deas[i,jj]*(Yas[i,jj+1]-Yas[i,jj])/dss+kma[i]*(Ya[i]-Yas[i,jj])/ds)
                Ybss[i,jj]= 1/por*(4.0*Debs[i,jj]*(Ybs[i,jj+1]-Ybs[i,jj])/dss+kmb[i]*(Yb[i]-Ybs[i,jj])/ds)
                Ycss[i,jj]= 1/por*(4.0*Decs[i,jj]*(Ycs[i,jj+1]-Ycs[i,jj])/dss+kmc[i]*(Yc[i]-Ycs[i,jj])/ds)
                Tkss[i,jj]= (4.0*Ds[i,jj])*(Tks[i,jj+1]-Tks[i,jj])/dss- hm[i]*(Tks[i,jj]-Tk[i])/(ds*rho_s[i,jj]*Cp_s[i,jj])

                Yasss[i,jj]=0
                Ybsss[i,jj]=0
                Ycsss[i,jj]=0
                Tksss[i,jj]=0
                
            elif (jj <ns-1):
                Yass[i,jj]=(1.0/(s[jj]))*(Yas[i,jj+1]-Yas[i,jj-1])/(2.0*ds)
                Ybss[i,jj]=(1.0/(s[jj]))*(Ybs[i,jj+1]-Ybs[i,jj-1])/(2.0*ds)
                Ycss[i,jj]=(1.0/(s[jj]))*(Ycs[i,jj+1]-Ycs[i,jj-1])/(2.0*ds)
                Tkss[i,jj]=(1.0/(s[jj]))*(Tks[i,jj+1]-Tks[i,jj-1])/(2.0*ds)
                
                Yasss[i,jj] = (Yas[i,jj+1]-2*Yas[i,jj]+Yas[i,jj-1])/dss
                Ybsss[i,jj] = (Ybs[i,jj+1]-2*Ybs[i,jj]+Ybs[i,jj-1])/dss
                Ycsss[i,jj] = (Ycs[i,jj+1]-2*Ycs[i,jj]+Ycs[i,jj-1])/dss
                Tksss[i,jj] = (Tks[i,jj+1]-2*Tks[i,jj]+Tks[i,jj-1])/dss
            else :
                Yass[i,jj]=0
                Ybss[i,jj]=0
                Ycss[i,jj]=0
                Tkss[i,jj]=0
                
                Yasss[i,jj] = 2*(Yas[i,jj-1]-Yas[i,jj])/dss
                Ybsss[i,jj] = 2*(Ybs[i,jj-1]-Ybs[i,jj])/dss
                Ycsss[i,jj] = 2*(Ycs[i,jj-1]-Ycs[i,jj])/dss
                Tksss[i,jj] = 2*(Tks[i,jj-1]-Tks[i,jj])/dss
                
            if (i ==0):
                Yaszz[i,jj] = 2*(Yas[i+1,jj]-Yas[i,jj])/dzs
                Ybszz[i,jj] = 2*(Ybs[i+1,jj]-Ybs[i,jj])/dzs
                Ycszz[i,jj] = 2*(Ycs[i+1,jj]-Ycs[i,jj])/dzs
                Tkszz[i,jj] = 2*(Tks[i+1,jj]-Tks[i,jj])/dzs

            elif (i<nz-1):
                Yaszz[i,jj] = (Yas[i+1,jj]-2.0*Yas[i,jj]+Yas[i-1,jj])/dzs
                Ybszz[i,jj] = (Ybs[i+1,jj]-2.0*Ybs[i,jj]+Ybs[i-1,jj])/dzs
                Ycszz[i,jj] = (Ycs[i+1,jj]-2.0*Ycs[i,jj]+Ycs[i-1,jj])/dzs
                Tkszz[i,jj] = (Tks[i+1,jj]-2.0*Tks[i,jj]+Tks[i-1,jj])/dzs

            else :
                Yaszz[i,jj] = 2*(Yas[i-1,jj]-Yas[i,jj])/dzs
                Ybszz[i,jj] = 2*(Ybs[i-1,jj]-Ybs[i,jj])/dzs
                Ycszz[i,jj] = 2*(Ycs[i-1,jj]-Ycs[i,jj])/dzs
                Tkszz[i,jj] = 2*(Tks[i-1,jj]-Tks[i,jj])/dzs

    #First derivative for diffusion term in radial direction
    #Solid cordierite phase
    for jjj in range (0,nu):
        for i in range(0,nz):
            
            if jjj == 0:
                Tkuu[i,jjj] = (Tku[i,jjj+1]-2.0*Tku[i,jjj]+Tks[i,ns-1])/du
                Tkuuu[i,jjj]= (Tku[i,jjj+1]-2.0*Tku[i,jjj]+Tks[i,ns-1])/dus

            elif jjj<nu-1:
                Tkuu[i,jjj] = (1.0/(u[jjj]))*(Tku[i,jjj+1]-Tku[i,jjj-1])/(2.0*du)
                Tkuuu[i,jjj]= (Tku[i,jjj+1]-2.0*Tku[i,jjj]+Tku[i,jjj-1])/dus

            else:              
                Tkuu[i,jjj] = 0
                Tkuuu[i,jjj]= 2.0*(Tku[i,jjj-1]-Tku[i,jjj])/dus

            if i ==0:
                Tkuzz[i,jjj]= 2.0*(Tku[i+1,jjj]-Tku[i,jjj])/dzs

            elif i <nz-1:
                Tkuzz[i,jjj]= (Tku[i+1,jjj]-2.0*Tku[i,jjj]+Tku[i-1,jjj])/dzs

            else :
                Tkuzz[i,jjj]= 2.0*(Tku[i-1,jjj]-Tku[i,jjj])/dzs

    #PDE
    #Gas phase
    for i in range(0,nz):
        Yat[i] = (Dia[i]*Yazz[i] - v[i]*Yaz[i]-4.0*kma[i]*(Ya[i]-Yas[i,0])/DH)
        Ybt[i] = (Dib[i]*Ybzz[i] - v[i]*Ybz[i]-4.0*kmb[i]*(Yb[i]-Ybs[i,0])/DH)
        Yct[i] = (Dic[i]*Yczz[i] - v[i]*Ycz[i]-4.0*kmc[i]*(Yc[i]-Ycs[i,0])/DH)
        Tkt[i] = (Dit[i]*Tkzz[i] - v[i]*Tkz[i] +(4.0*hm[i]*(Tks[i,0]-Tk[i]))/(DH*Cp_a[i]*rho_a[i]))

    #Solid washcoat phase
    for jj in range (0,ns):
        for i in range(0,nz):
            if jj ==0:
                Yast[i,jj] = Yass[i,jj]+(1/por)*(Deas[i,jj]*(Yaszz[i,jj])-RCO[i,jj]*H*Av/r_gtc*R*Tks[i,jj]/P)
                Ybst[i,jj] = Ybss[i,jj]+(1/por)*(Debs[i,jj]*(Ybszz[i,jj])+RCO2[i,jj]*H*Av/r_gtc*R*Tks[i,jj]/P)
                Ycst[i,jj] = Ycss[i,jj]+(1/por)*(Decs[i,jj]*(Ycszz[i,jj])-RHC[i,jj]*H*Av/r_gtc*R*Tks[i,jj]/P)
                Tkst[i,jj] = Tkss[i,jj]+Ds[i,jj]*Tkszz[i,jj]+(-RCO[i,jj]*dHR-RHC[i,jj]*dHRP[i,jj])*H*Av/(rho_s[i,jj]*Cp_s[i,jj])

                
            else:
                Yast[i,jj] = (1/por)*(Deas[i,jj]*(Yass[i,jj]+Yasss[i,jj]+Yaszz[i,jj])-RCO[i,jj]*H*Av/r_gtc*R*Tks[i,jj]/P)
                Ybst[i,jj] = (1/por)*(Debs[i,jj]*(Ybss[i,jj]+Ybsss[i,jj]+Ybszz[i,jj])+RCO2[i,jj]*H*Av/r_gtc*R*Tks[i,jj]/P)
                Ycst[i,jj] = (1/por)*(Decs[i,jj]*(Ycss[i,jj]+Ycsss[i,jj]+Ycszz[i,jj])-RHC[i,jj]*H*Av/r_gtc*R*Tks[i,jj]/P)
                Tkst[i,jj] = Ds[i,jj]*(Tkss[i,jj]+Tksss[i,jj]+Tkszz[i,jj])+(-RCO[i,jj]*dHR-RHC[i,jj]*dHRP[i,jj])*H*Av/(rho_s[i,jj]*Cp_s[i,jj])

    #Solid cordierite phase
    for jjj in range (0,nu):
        for i in range(0,nz):
            Tkut[i,jjj] = Du[i,jjj]*(Tkuu[i,jjj]+Tkuuu[i,jjj]+Tkuzz[i,jjj])

    #Set array to zeros(2D)    
    y1 = np.zeros(4*nz+4*nz*ns+i*nu+jjj+1)

    #Gas phase    
    for i in range (0,nz):
        y1[i] = Yat[i]
        y1[i+nz] = Ybt[i]
        y1[i+2*nz] = Yct[i]
        y1[i+3*nz] = Tkt[i]

        #Solid washcoat phase
        for jj in range(0,ns):
            y1[4*nz+i*ns+jj] = Yast[i,jj]
            y1[4*nz+i*ns+jj+ns*nz] = Ybst[i,jj]
            y1[4*nz+i*ns+jj+2*ns*nz] = Ycst[i,jj]
            y1[4*nz+i*ns+jj+3*ns*nz] = Tkst[i,jj]
            
    #Solid cordierite phase        
    for jjj in range(0,nu):
        for i in range(0,nz):
            y1[4*nz+4*nz*ns+i*nu+jjj] = Tkut[i,jjj]
            
    return y1


#ODE integration
f = scipy.integrate.ode(pde).set_integrator('vode',method = 'bdf', order =15,atol = 1E-5, rtol = 1E-5)                                              #ODE Integrator
f.set_initial_value(Y,0).set_f_params(Dia,kma,Dib,kmb,Dic,kmc,Dit,hm,Cp_a,rho_a,Deas,RCO,Debs,RCO2,Decs,RHC,Ds,dHRP,rho_s,Cp_s,k_u,rho_u,Cp_u,Du)   #Set intial value to ODE Integrator

#Time
time    = [] # To sotre time
t       = 1  # Set time postion 1

#Set array to zeros
Ya1 = Yb1 = Yc1 = Tk1 = np.zeros((n_steps,nz))          #Gas phase
Yas1 = Ybs1 = Ycs1 = Tks1 =  np.zeros((n_steps,nz,ns))  #Solid washcoat phase
Tku1 = np.zeros((n_steps,nz,nu))                        #Solid cordierite phase   

#Send intial value to array
#Gas phase
for i in range (0,nz):
    Ya1[0,i] = Ya[i]
    Yb1[0,i] = Yb[i]
    Yc1[0,i] = Yc[i]
    Tk1[0,i] = Tk[i]

#Solid washcoat phase
for jj in range (0,ns):
    for i in range(0,nz):
        Yas1[0,i,jj] = Yas[i,jj]
        Ybs1[0,i,jj] = Ybs[i,jj]
        Ycs1[0,i,jj] = Ycs[i,jj]
        Tks1[0,i,jj] = Tks[i,jj]

#Solid cordierite phase 
for jjj in range (0,nu):
    for i in range(0,nz):        
        Tku1[0,i,jjj] = Tku[i,jjj]
        
while f.successful() and f.t < tf:
    f.integrate(f.t+td)                             #Integration
    time += [f.t]                                   #Integration time start to store
    Y = f.y                                         

    #Obtain value 2D array from integrator and convert into 1D array
    #Gas phase    
    for i in range (0,nz):
        Ya[i] = f.y[i]
        Yb[i] = f.y[i+nz]
        Yc[i] = f.y[i+2*nz]
        Tk[i] = f.y[i+3*nz]

    #Solid washcoat phase
    for jj in range (0,ns):
        for i in range(0,nz):
            Yas[i,jj] = f.y[4*nz+i*ns+jj]
            Ybs[i,jj] = f.y[4*nz+i*ns+jj+ns*nz]
            Ycs[i,jj] = f.y[4*nz+i*ns+jj+2*ns*nz]
            Tks[i,jj] = f.y[4*nz+i*ns+jj+3*ns*nz]
            
    #Solid cordierite phase           
    for jjj in range (0,nu):
        for i in range(0,nz):
            Tku[i,jjj] = f.y[4*nz+4*nz*ns+i*nu+jjj]

    #Store to 2D time array
    #Gas phase
    for i in range (0,nz):
        Ya1[t,i] = Ya[i]
        Yb1[t,i] = Yb[i]
        Yc1[t,i] = Yc[i]
        Tk1[t,i] = Tk[i]

    #Solid washcoat phase
    for jj in range (0,ns):
        for i in range(0,nz):
            Yas1[t,i,jj] = Yas[i,jj]
            Ybs1[t,i,jj] = Ybs[i,jj]
            Ycs1[t,i,jj] = Ycs[i,jj]
            Tks1[t,i,jj] = Tks[i,jj]

    #Solid cordierite phase           
    for jjj in range (0,nu):
        for i in range(0,nz):
            Tku1[t,i,jjj] = Tku[i,jjj]
        

    for i in range(0,nz):

        #Bulk diffusion coefficient and dispersion coefficient      
        v[i]     = vmean*Tk[i]/298                                                                          #Velocity                                                   #m/s
        Dca[i]   = (1.013E-2*Tk[i]**(1.75)*(1/Mco+1/Mair)**(0.5))/(P*(Vco**(0.3333)+Vair**(0.3333))**2)     #Fuller equation (Molecular diffusion coefficient of CO)    #m2/s
        Dcb[i]   = (1.013E-2*Tk[i]**1.75*(1/Mco2+1/Mair)**0.5)/(P*(Vco2**(0.3333)+Vair**(0.3333))**2)       #Fuller equation (Molecular diffusion coefficient of CO2)   #m2/s
        Dcc[i]   = (1.013E-2*Tk[i]**1.75*(1/Mc3h8+1/Mair)**0.5)/(P*(Vc3h8**(0.3333)+Vair**(0.3333))**2)     #Fuller equation (Molecular diffusion coefficient of HC)    #m2/s
        Dia[i]   = Dca[i] + (v[i]*r0)**2.0/(48.0*Dca[i])                                                    #Taylor and Aris (Dispersion coefficient of CO)             #m2/s
        Dib[i]   = Dcb[i] + (v[i]*r0)**2/(48*Dcb[i])                                                        #Taylor and Aris (Dispersion coefficient of CO2)            #m2/s
        Dic[i]   = Dcc[i] + (v[i]*r0)**2/(48*Dcc[i])                                                        #Taylor and Aris (Dispersion coefficient of HC)             #m2/s

        #Thermal diffusion coefficient in the fluid (Air)
        k_a[i]   = 1.679E-2+5.073E-5*Tk[i]                                                                  #Thermal conductivity                                       #W/mK
        rho_a[i] = P*Mair/(1000*R*Tk[i])                                                                    #Fluid density of air                                       #kg/m3
        Cp_a[i]  = (28.09+1.965E-3*Tk[i]+4.799E-6*Tk[i]**2-1.965E-9*Tk[i]**3)/(Mair/1000)                   #Specific heat of air                                       #J/kgK
        Dt[i]    = k_a[i]/(rho_a[i]*Cp_a[i])                                                                #Thermal diffusivity                                        #m2/s
        Dit[i]   = Dt[i]+(v[i]*r0)**2/(48*Dt[i])                                                            #Taylor and Aris (Dispersion coefficient of air)            #m2/s

        #Gas phase dimensionless number
        miu[i]   = 7.701E-6+4.166E-8*Tk[i]-7.531E-12*Tk[i]**2                                               #Dynamic viscosity                                          #Pa.s
        Rey[i]   = rho_a[i]*vmean*DH/miu[i]                                                                 #Reynolds number
        Pr      = 0.7                                                                                       #Prandtl number
        L[i]    = (i+1)*dz                                                                                  #Distance from entrance in direction of gas flow                                                                  
        Gz[i]   = Rey[i]*Pr*DH/L[i]                                                                         #Graetz Number
        NuT[i]  = 3.657+8.827*(1000/Gz[i])**-0.545*math.exp(-48.2/Gz[i])                                    #Correlation of Nu for wall temperature (Tronconi and Forzatti)                                     
        NuH[i]  = 4.367+13.18*(1000/Gz[i])**-0.524*math.exp(-60.2/Gz[i])                                    #Correlation of Nu for wall flux        (Hayes)
        Nu[i]   = (NuT[i]+NuH[i])/2+2 
        dHR     = -282.55E3                                                                                 #Heat of reaction of CO                                            #kJ/mol.K

        #Transfer coefficients and assume mass-heat transfer analogy
        Sh[i]   = Nu[i]                                                                                     #Sherwood number
        kma[i]  = Sh[i]*Dca[i]/DH                                                                           #Mass transfer coefficient for CO                           #m/s
        kmb[i]  = Sh[i]*Dcb[i]/DH                                                                           #Mass transfer coefficient for CO2                          #m/s
        kmc[i]  = Sh[i]*Dcc[i]/DH                                                                           #Mass transfer coefficient for HC                           #m/s
        hm[i]   = Nu[i]*k_a[i]/DH                                                                           #Heat transfer coefficient for CO                           #W/(m2.K)                          #m/s
               
    for jj in range (0,ns):
        for i in range(0,nz):

            #Mole fraction in solid phase
            YCO[i,jj]   = Yas [i,jj]                                                                                        #Carbon monoxide
            YCO2[i,jj]  = Ybs[i,jj]                                                                                         #Carbon dioxide
            YHC[i,jj]   = Ycs[i,jj]                                                                                         #Hydrocarbon

            #Effecitive diffusivity
            Dcas[i,jj] = (1.013E-2*Tks[i,jj]**1.75*(1/Mco+1/Mair)**(0.5))/(P*(Vco**(0.3333)+Vair**(0.3333))**2)             #Fuller equation (Molecular diffusion coefficient of CO)     #m2/s
            Dcbs[i,jj] = (1.013E-2*Tks[i,jj]**1.75*(1/Mco2+1/Mair)**0.5)/(P*(Vco2**(0.3333)+Vair**(0.3333))**2)             #Fuller equation (Molecular diffusion coefficient of CO2)    #m2/s
            Dccs[i,jj] = (1.013E-2*Tks[i,jj]**1.75*(1/Mc3h8+1/Mair)**0.5)/(P*(Vc3h8**(0.3333)+Vair**(0.3333))**2)           #Fuller equation (Molecular diffusion coefficient of HC)     #m2/s
            Dkas[i,jj] = 97.0*re*(Tks[i,jj]/Mco)**0.5                                                                       #Knudsen diffusion coefficiet of CO                          #m2/s
            Dkbs[i,jj] = 97.0*re*(Tks[i,jj]/Mco2)**0.5                                                                      #Knudsen diffusion coefficient of CO2                        #m2/s
            Dkcs[i,jj] = 97.0*re*(Tks[i,jj]/Mc3h8)**0.5                                                                     #Knudsen diffusion coefficientof HC                          #m2/s
            Dvas[i,jj] = 1/(1/Dcas[i,jj]+1/Dkas[i,jj])                                                                      #Diffusion coefficient in the pore for CO                    #m2/s                                                                 #Knudsen diffusion coefficient of CO
            Dvbs[i,jj] = 1/(1/Dcbs[i,jj]+1/Dkbs[i,jj])                                                                      #Diffusion coefficient in the pore for CO2                   #m2/s
            Dvcs[i,jj] = 1/(1/Dccs[i,jj]+1/Dkcs[i,jj])                                                                      #Diffusion coefficient in the pore for HC                    #m2/s
            Deas[i,jj] = ff*por*Dvas[i,jj]/tau                                                                              #Effective Diffusivity of CO                                 #m2/s 
            Debs[i,jj] = ff*por*Dvbs[i,jj]/tau                                                                              #Effective Diffusivity of CO2                                #m2/s
            Decs[i,jj] = ff*por*Dvcs[i,jj]/tau                                                                              #Effective Diffusivity of HC                                 #m2/s

            #Thermal effective diffusivity in washcoat
            k_s[i,jj]   = 0.9558-2.09E-4*Tks[i,jj]                                                                          #Soid thermal conductivity                                   #W/mK                                          
            rho_s[i,jj] = rho_wc/1000                                                                                       #Washcoat density                                            #kg/m3
            Cp_s[i,jj]  = 948 + 0.2268*Tks[i,jj]                                                                            #Specific heat capacity of solid                             #J/kgK
            Ds[i,jj]    = k_s[i,jj]/(rho_s[i,jj]*Cp_s[i,jj])                                                                #Thermal diffusivity                                         #m2/s

            #Rate constant
            k1[i,jj]    = pf*math.exp(act1/Tks[i,jj])                                                                       #Numerator for CO
            k2[i,jj]    = pg*math.exp(act2/Tks[i,jj])                                                                       #Denominator (Inhibition term)
            k3[i,jj]    = pt*math.exp(act3/Tks[i,jj])                                                                       #Numerator for HC
            k4[i,jj]    = pv*math.exp(act4/Tks[i,jj])                                                                       #Denominator (Inhibition term)
            k5[i,jj]    = pw*math.exp(act5/Tks[i,jj])                                                                       #Denominator,extra
            Inh[i,jj]   = Tks[i,jj]*(1+k2[i,jj]*YCO[i,jj]+k4[i,jj]*YHC[i,jj])**2*(1+k5[i,jj]*(YCO[i,jj])**2*(YHC[i,jj])**2) #Inhibition term      
            RCO[i,jj]   = k1[i,jj]*YCO[i,jj]*YO2/Inh[i,jj]*R*Tks[i,jj]/P                                                    #Unit conversion                                             #m3(CO)/mol(Pt)s
            RHC[i,jj]   = k3[i,jj]*YHC[i,jj]*YO2/Inh[i,jj]*R*Tks[i,jj]/P                                                    #Unit conversion                                             #m3(HC)/mol(Pt)s
            RCO2[i,jj]  = RCO[i,jj]+RHC[i,jj]                                                                               #Unit conversion                                             #m3(CO2)/mol(Pt)s
            RTCO[i,jj]  = k1[i,jj]*YCO[i,jj]*YO2/Inh[i,jj]                                                                  #Unit conversion                                             #mol(CO)/mol(Pt) s
            RTHC[i,jj]  = k3[i,jj]*YHC[i,jj]*YO2/Inh[i,jj]                                                                  #Unit conversion                                             #mol(HC)/mol(Pt) s
            dHRP[i,jj]  = -2.059E6+72.3*Tks[i,jj]-9.69E-2*Tks[i,jj]**2+4.34E-5*Tks[i,jj]**3+7.56e-9*Tks[i,jj]**4            #Heat of reaction for HC                                     #kJ/mol.K

    for jjj in range(0,nu):
        for i in range(0,nz):

            #Thermal effective diffusivity in the washcoat
                k_u[i,jjj]   = 5.423e-9*Tku[i,jjj]**3-1.276e-5*Tku[i,jjj]**2+8.107e-3*Tku[i,jjj]+7.975e-1                   #Solid thermal conductivity                                  #W/m.K               
                rho_u[i,jjj] = rho_cord/1000                                                                                #Density of substrate                                        #kg/m3
                Cp_u[i,jjj]  = 1071 + 0.156*Tku[i,jjj]-3.437E7*Tku[i,jjj]**-2                                               #Specific heat capacity of washcoat                          #J/kg.K
                Du[i,jjj]    = k_u[i,jjj]/(rho_u[i,jjj]*Cp_u[i,jjj])                                                        #Thermal diffusivity                                         #m2/s
            
    print (f.t) #Print time
    t+= 1 
    f.set_initial_value(Y,f.t).set_f_params(Dia,kma,Dib,kmb,Dic,kmc,Dit,hm,Cp_a,rho_a,Deas,RCO,Debs,RCO2,Decs,RHC,Ds,dHRP,rho_s,Cp_s,k_u,rho_u,Cp_u,Du) #Send condition and parameter to integrator

#Set array to zeros
#Reaction Rate
rCO = r2CO = COconv = rHC = r2HC = HCconv = Tkee = np.zeros(nout)

#Computation of reaction rate
for t in range (0,nout):
    rCO[t]=Mflow*(Yae-Ya1[t,nz-1]);              # CO Reaction rate             # mol/s
    r2CO[t]=rCO[t]/V_slice;                      # CO Reaction rate per slice
    COconv[t]=(Yae-Ya1[t,nz-1])/Yae;             # CO conversion
    rHC[t]=Mflow*(Yce-Yc1[t,nz-1]);              # HC Reaction rate             # mol/s
    r2HC[t]=rHC[t]/V_slice;                      # HC Reaction rate per slice
    HCconv[t]=(Yce-Yc1[t,nz-1])/Yce;             # HC conversion
    
    rt1=150.0                                    # Linear ramp time     #s
    rt2=150.0                                    # Linear ramp time     #s
    Tkem=543.0                                   # Max Temperature      #K
    mp1=(Tkef2-Tke)/rt1                          # Gradient 1
    mp2=(Tke-Tkem)/rt2                          # Gradient 2
    
    if t<rt1+1:             
        Tkee[t]=Tke+mp1*t
        
    elif t>rt1:             
        Tkee[t]=Tkem-mp2*(rt1-t)        
        
    else:
        Tkee[t]=Tke    

#Graph
plot.figure(1)
plot.plot(time[:300],Tk1[:300,nz-1],label='Tk(nz)')
plot.plot(time[:300],Tks1[:300,1,1],label='Tks(1,1)')
plot.plot(time[:300],Tku1[:300,1,1],label='Tku(1,1)')
plot.plot(time[:300],Tkee[:300],label='Entering T')
plot.title('Temperature profile')
plot.grid()
plot.xlabel('Time,s')
plot.ylabel('Temperature, K')
plot.legend()
plot.show()

plot.figure(2)
plot.plot(time[:300],Ya1[:300,nz-1],label='Ya')
plot.plot(time[:300],Yb1[:300,nz-1],label='Yb')
plot.title('Ya and Yb(r=0,z=L,t)')
plot.grid()
plot.xlabel('Time,s')
plot.ylabel('Mole fraction')
plot.legend()
plot.show()

plot.figure(3)
plot.plot(time[:300],Yc1[:300,nz-1])
plot.title('Yc(r=0,z=L,t)')
plot.grid()
plot.xlabel('Time,s')
plot.ylabel('HC mol fraction')
plot.show()

plot.figure(4)
plot.plot(time[:300],r2CO[:300],label='r2CO')
plot.plot(time[:300],r2HC[:300],label='r2HC')
plot.title('Reaction rate per slice')
plot.grid()
plot.xlabel('Time,s')
plot.ylabel('Rate , mol/m3s')
plot.legend()
plot.show()

plot.figure(5)
plot.plot(Tks1[:155,1,1],r2CO[:155],label='Ignition')
plot.plot(Tks1[154:300,1,1],r2CO[154:300],label='Extinction')
plot.title('Light-off hysteresis')
plot.grid()
plot.xlabel('Solid temperature, K')
plot.ylabel('CO reaction rate , mol/m3s')
plot.legend(loc='upper left')
plot.show()

plot.figure(6)
plot.plot(time[:300],COconv[:300],label='CO')
plot.plot(time[:300],HCconv[:300],label='HC')
plot.title('CO and HC conversion against time')
plot.grid()
plot.xlabel('Time,s')
plot.ylabel('CO and HC conversion')
plot.legend()
plot.show()

plot.figure(7)
plot.plot(Tks1[:155,1,1],COconv[:155],label='Ignition - solid')
plot.plot(Tks1[154:300,1,1],COconv[154:300],label='Extinction - solid')
plot.plot(Tkee[:155],COconv[:155],label='Ignition ')
plot.plot(Tkee[154:300],COconv[154:300],label='Extinction ')
plot.title('Light-off hysteresis')
plot.grid()
plot.xlabel('Temperature,K')
plot.ylabel('CO  conversion')
plot.legend(loc='upper left')
plot.show()


